{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041D\\u0438\\u043A\\u0438\\u0442\\u0430\\\\Desktop\\\\cur\\\\src\\\\components\\\\Calendar.jsx\";\nimport React from 'react';\nimport Calendar from 'react-calendar';\nimport { format, isSameDay } from 'date-fns';\nimport { safeParse } from '../utils/dateUtils';\nimport 'react-calendar/dist/Calendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalendarComponent = ({\n  selectedDate,\n  onDateChange,\n  tasks\n}) => {\n  // Calendar tile className for background colors only\n  const tileClassName = ({\n    date,\n    view\n  }) => {\n    if (view !== 'month') return '';\n    const tasksDone = tasks.filter(t => {\n      const d = safeParse(t.datetime);\n      return d ? isSameDay(d, date) && t.completed : false;\n    }).length;\n    const tasksTotal = tasks.filter(t => {\n      const d = safeParse(t.datetime);\n      return d ? isSameDay(d, date) : false;\n    }).length;\n    if (!tasksTotal) return 'cal-empty';\n    const percent = Math.round(tasksDone / tasksTotal * 100);\n    return percent >= 85 ? 'cal-green' : percent >= 50 ? 'cal-yellow' : 'cal-red';\n  };\n\n  // Calendar tile content to show numbers\n  const tileContent = ({\n    date,\n    view\n  }) => {\n    if (view !== 'month') return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: '14px',\n        fontWeight: '500'\n      },\n      children: format(date, 'd')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Calendar, {\n    onChange: onDateChange,\n    value: selectedDate,\n    tileClassName: tileClassName,\n    tileContent: tileContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_c = CalendarComponent;\nexport default CalendarComponent;\nvar _c;\n$RefreshReg$(_c, \"CalendarComponent\");","map":{"version":3,"names":["React","Calendar","format","isSameDay","safeParse","jsxDEV","_jsxDEV","CalendarComponent","selectedDate","onDateChange","tasks","tileClassName","date","view","tasksDone","filter","t","d","datetime","completed","length","tasksTotal","percent","Math","round","tileContent","style","width","height","display","alignItems","justifyContent","fontSize","fontWeight","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","value","_c","$RefreshReg$"],"sources":["C:/Users/Никита/Desktop/cur/src/components/Calendar.jsx"],"sourcesContent":["import React from 'react';\nimport Calendar from 'react-calendar';\nimport { format, isSameDay } from 'date-fns';\nimport { safeParse } from '../utils/dateUtils';\nimport 'react-calendar/dist/Calendar.css';\n\nconst CalendarComponent = ({ selectedDate, onDateChange, tasks }) => {\n  // Calendar tile className for background colors only\n  const tileClassName = ({ date, view }) => {\n    if (view !== 'month') return '';\n    \n    const tasksDone = tasks.filter(t => {\n      const d = safeParse(t.datetime);\n      return d ? isSameDay(d, date) && t.completed : false;\n    }).length;\n    \n    const tasksTotal = tasks.filter(t => {\n      const d = safeParse(t.datetime);\n      return d ? isSameDay(d, date) : false;\n    }).length;\n    \n    if (!tasksTotal) return 'cal-empty';\n    \n    const percent = Math.round((tasksDone / tasksTotal) * 100);\n    return percent >= 85 ? 'cal-green' : percent >= 50 ? 'cal-yellow' : 'cal-red';\n  };\n\n  // Calendar tile content to show numbers\n  const tileContent = ({ date, view }) => {\n    if (view !== 'month') return null;\n    return (\n      <div style={{ \n        width: '100%', \n        height: '100%', \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'center',\n        fontSize: '14px',\n        fontWeight: '500'\n      }}>\n        {format(date, 'd')}\n      </div>\n    );\n  };\n\n  return (\n    <Calendar\n      onChange={onDateChange}\n      value={selectedDate}\n      tileClassName={tileClassName}\n      tileContent={tileContent}\n    />\n  );\n};\n\nexport default CalendarComponent;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,SAASC,MAAM,EAAEC,SAAS,QAAQ,UAAU;AAC5C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,OAAO,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,YAAY;EAAEC,YAAY;EAAEC;AAAM,CAAC,KAAK;EACnE;EACA,MAAMC,aAAa,GAAGA,CAAC;IAAEC,IAAI;IAAEC;EAAK,CAAC,KAAK;IACxC,IAAIA,IAAI,KAAK,OAAO,EAAE,OAAO,EAAE;IAE/B,MAAMC,SAAS,GAAGJ,KAAK,CAACK,MAAM,CAACC,CAAC,IAAI;MAClC,MAAMC,CAAC,GAAGb,SAAS,CAACY,CAAC,CAACE,QAAQ,CAAC;MAC/B,OAAOD,CAAC,GAAGd,SAAS,CAACc,CAAC,EAAEL,IAAI,CAAC,IAAII,CAAC,CAACG,SAAS,GAAG,KAAK;IACtD,CAAC,CAAC,CAACC,MAAM;IAET,MAAMC,UAAU,GAAGX,KAAK,CAACK,MAAM,CAACC,CAAC,IAAI;MACnC,MAAMC,CAAC,GAAGb,SAAS,CAACY,CAAC,CAACE,QAAQ,CAAC;MAC/B,OAAOD,CAAC,GAAGd,SAAS,CAACc,CAAC,EAAEL,IAAI,CAAC,GAAG,KAAK;IACvC,CAAC,CAAC,CAACQ,MAAM;IAET,IAAI,CAACC,UAAU,EAAE,OAAO,WAAW;IAEnC,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAEV,SAAS,GAAGO,UAAU,GAAI,GAAG,CAAC;IAC1D,OAAOC,OAAO,IAAI,EAAE,GAAG,WAAW,GAAGA,OAAO,IAAI,EAAE,GAAG,YAAY,GAAG,SAAS;EAC/E,CAAC;;EAED;EACA,MAAMG,WAAW,GAAGA,CAAC;IAAEb,IAAI;IAAEC;EAAK,CAAC,KAAK;IACtC,IAAIA,IAAI,KAAK,OAAO,EAAE,OAAO,IAAI;IACjC,oBACEP,OAAA;MAAKoB,KAAK,EAAE;QACVC,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE,MAAM;QACfC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBC,QAAQ,EAAE,MAAM;QAChBC,UAAU,EAAE;MACd,CAAE;MAAAC,QAAA,EACChC,MAAM,CAACU,IAAI,EAAE,GAAG;IAAC;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CAAC;EAEV,CAAC;EAED,oBACEhC,OAAA,CAACL,QAAQ;IACPsC,QAAQ,EAAE9B,YAAa;IACvB+B,KAAK,EAAEhC,YAAa;IACpBG,aAAa,EAAEA,aAAc;IAC7Bc,WAAW,EAAEA;EAAY;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEN,CAAC;AAACG,EAAA,GA/CIlC,iBAAiB;AAiDvB,eAAeA,iBAAiB;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}