{"ast":null,"code":"import React,{useState,useEffect}from'react';import{format,addMonths,subMonths,startOfMonth,endOfMonth,eachDayOfInterval,isSameMonth,isSameDay,startOfWeek,endOfWeek}from'date-fns';import{ru}from'date-fns/locale';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Calendar=_ref=>{let{selectedDate,onDateChange,tasks=[],habits=[],onAchievement}=_ref;const[currentDate,setCurrentDate]=useState(selectedDate||new Date());// Update currentDate when selectedDate changes\nuseEffect(()=>{if(selectedDate){setCurrentDate(selectedDate);}},[selectedDate]);const monthStart=startOfMonth(currentDate);const monthEnd=endOfMonth(currentDate);const calendarStart=startOfWeek(monthStart,{weekStartsOn:1});// Monday = 1\nconst calendarEnd=endOfWeek(monthEnd,{weekStartsOn:1});// Monday = 1\nconst days=eachDayOfInterval({start:calendarStart,end:calendarEnd});const weekDays=['Пн','Вт','Ср','Чт','Пт','Сб','Вс'];const nextMonth=()=>setCurrentDate(addMonths(currentDate,1));const prevMonth=()=>setCurrentDate(subMonths(currentDate,1));const isCurrentMonth=date=>isSameMonth(date,currentDate);const isToday=date=>isSameDay(date,new Date());const isSelected=date=>selectedDate&&isSameDay(date,selectedDate);// Handle date click with achievement check\nconst handleDateClickWithAchievement=date=>{const{isPerfectDay,overallCompletionRate,totalTasks,completedTasks,totalHabits,completedHabits}=getDayProductivity(date);// Trigger achievement animation if perfect day\nif(isPerfectDay&&onAchievement){onAchievement({type:'perfect-day',date:format(date,'dd MMMM yyyy',{locale:ru}),stats:{tasks:\"\".concat(completedTasks,\"/\").concat(totalTasks),habits:\"\".concat(completedHabits,\"/\").concat(totalHabits),completion:\"\".concat(Math.round(overallCompletionRate),\"%\")}});}if(onDateChange){onDateChange(date);}};// Calculate productivity for a specific day\nconst getDayProductivity=date=>{const dateStr=format(date,'yyyy-MM-dd');// Get tasks for this day\nconst dayTasks=tasks.filter(task=>{const taskDate=new Date(task.datetime);return format(taskDate,'yyyy-MM-dd')===dateStr;});// Get habits completed on this day\nconst dayHabits=habits.filter(habit=>{const completedDates=habit.completedDates||[];return completedDates.includes(dateStr);});const totalTasks=dayTasks.length;const completedTasks=dayTasks.filter(task=>task.completed).length;const totalHabits=habits.length;const completedHabits=dayHabits.length;// Calculate task completion rate\nconst taskCompletionRate=totalTasks>0?completedTasks/totalTasks*100:0;// Calculate habit completion rate\nconst habitCompletionRate=totalHabits>0?completedHabits/totalHabits*100:0;// Calculate combined completion rate (both tasks and habits must be considered)\nlet overallCompletionRate=0;if(totalTasks>0&&totalHabits>0){// Both tasks and habits exist - average their completion rates\noverallCompletionRate=(taskCompletionRate+habitCompletionRate)/2;}else if(totalTasks>0){// Only tasks exist\noverallCompletionRate=taskCompletionRate;}else if(totalHabits>0){// Only habits exist\noverallCompletionRate=habitCompletionRate;}// Check for perfect day achievement\nconst isPerfectDay=totalTasks>5&&completedTasks===totalTasks&&totalHabits>0&&completedHabits===totalHabits;return{taskCompletionRate,habitCompletionRate,overallCompletionRate,totalTasks,completedTasks,totalHabits,completedHabits,isPerfectDay};};// Get color class based on productivity\nconst getProductivityClass=date=>{const{overallCompletionRate,totalTasks,totalHabits}=getDayProductivity(date);// Only show productivity colors if there are tasks or habits for the day\nif(totalTasks===0&&totalHabits===0)return'';// Green only when everything is 100% complete\nif(overallCompletionRate===100)return'productive-high';if(overallCompletionRate>=50)return'productive-medium';if(overallCompletionRate>0)return'productive-low';return'';};// Check if day has achievement star\nconst hasAchievementStar=date=>{const{isPerfectDay}=getDayProductivity(date);return isPerfectDay;};return/*#__PURE__*/_jsxs(\"div\",{className:\"calendar\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"month\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"nav\",onClick:prevMonth,children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-angle-left\"})}),/*#__PURE__*/_jsxs(\"div\",{children:[format(currentDate,'MMMM',{locale:ru}),/*#__PURE__*/_jsx(\"span\",{className:\"year\",children:format(currentDate,'yyyy')})]}),/*#__PURE__*/_jsx(\"button\",{className:\"nav\",onClick:nextMonth,children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-angle-right\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"days\",children:weekDays.map(day=>/*#__PURE__*/_jsx(\"span\",{children:day},day))}),/*#__PURE__*/_jsx(\"div\",{className:\"dates\",children:days.map((day,index)=>{const productivityClass=getProductivityClass(day);const hasStar=hasAchievementStar(day);return/*#__PURE__*/_jsxs(\"button\",{className:\"\\n                \".concat(isToday(day)?'today':'',\" \\n                \").concat(isSelected(day)?'selected':'',\"\\n                \").concat(!isCurrentMonth(day)?'other-month':'',\"\\n                \").concat(productivityClass,\"\\n              \"),onClick:()=>handleDateClickWithAchievement(day),disabled:!isCurrentMonth(day),children:[/*#__PURE__*/_jsx(\"time\",{children:format(day,'d')}),hasStar&&/*#__PURE__*/_jsx(\"span\",{className:\"achievement-star\",children:\"\\u2B50\"})]},index);})})]});};export default Calendar;","map":{"version":3,"names":["React","useState","useEffect","format","addMonths","subMonths","startOfMonth","endOfMonth","eachDayOfInterval","isSameMonth","isSameDay","startOfWeek","endOfWeek","ru","jsx","_jsx","jsxs","_jsxs","Calendar","_ref","selectedDate","onDateChange","tasks","habits","onAchievement","currentDate","setCurrentDate","Date","monthStart","monthEnd","calendarStart","weekStartsOn","calendarEnd","days","start","end","weekDays","nextMonth","prevMonth","isCurrentMonth","date","isToday","isSelected","handleDateClickWithAchievement","isPerfectDay","overallCompletionRate","totalTasks","completedTasks","totalHabits","completedHabits","getDayProductivity","type","locale","stats","concat","completion","Math","round","dateStr","dayTasks","filter","task","taskDate","datetime","dayHabits","habit","completedDates","includes","length","completed","taskCompletionRate","habitCompletionRate","getProductivityClass","hasAchievementStar","className","children","onClick","map","day","index","productivityClass","hasStar","disabled"],"sources":["C:/Users/Никита/Desktop/GALL/p2/cur/src/components/Calendar.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { format, addMonths, subMonths, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay, startOfWeek, endOfWeek } from 'date-fns';\nimport { ru } from 'date-fns/locale';\n\nconst Calendar = ({ selectedDate, onDateChange, tasks = [], habits = [], onAchievement }) => {\n  const [currentDate, setCurrentDate] = useState(selectedDate || new Date());\n\n  // Update currentDate when selectedDate changes\n  useEffect(() => {\n    if (selectedDate) {\n      setCurrentDate(selectedDate);\n    }\n  }, [selectedDate]);\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarStart = startOfWeek(monthStart, { weekStartsOn: 1 }); // Monday = 1\n  const calendarEnd = endOfWeek(monthEnd, { weekStartsOn: 1 }); // Monday = 1\n\n  const days = eachDayOfInterval({ start: calendarStart, end: calendarEnd });\n\n  const weekDays = ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'];\n\n  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1));\n  const prevMonth = () => setCurrentDate(subMonths(currentDate, 1));\n\n  const isCurrentMonth = (date) => isSameMonth(date, currentDate);\n  const isToday = (date) => isSameDay(date, new Date());\n  const isSelected = (date) => selectedDate && isSameDay(date, selectedDate);\n  \n  // Handle date click with achievement check\n  const handleDateClickWithAchievement = (date) => {\n    const { isPerfectDay, overallCompletionRate, totalTasks, completedTasks, totalHabits, completedHabits } = getDayProductivity(date);\n    \n    // Trigger achievement animation if perfect day\n    if (isPerfectDay && onAchievement) {\n      onAchievement({\n        type: 'perfect-day',\n        date: format(date, 'dd MMMM yyyy', { locale: ru }),\n        stats: {\n          tasks: `${completedTasks}/${totalTasks}`,\n          habits: `${completedHabits}/${totalHabits}`,\n          completion: `${Math.round(overallCompletionRate)}%`\n        }\n      });\n    }\n    \n    if (onDateChange) {\n      onDateChange(date);\n    }\n  };\n\n  // Calculate productivity for a specific day\n  const getDayProductivity = (date) => {\n    const dateStr = format(date, 'yyyy-MM-dd');\n    \n    // Get tasks for this day\n    const dayTasks = tasks.filter(task => {\n      const taskDate = new Date(task.datetime);\n      return format(taskDate, 'yyyy-MM-dd') === dateStr;\n    });\n    \n    // Get habits completed on this day\n    const dayHabits = habits.filter(habit => {\n      const completedDates = habit.completedDates || [];\n      return completedDates.includes(dateStr);\n    });\n    \n    const totalTasks = dayTasks.length;\n    const completedTasks = dayTasks.filter(task => task.completed).length;\n    const totalHabits = habits.length;\n    const completedHabits = dayHabits.length;\n    \n    // Calculate task completion rate\n    const taskCompletionRate = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;\n    \n    // Calculate habit completion rate\n    const habitCompletionRate = totalHabits > 0 ? (completedHabits / totalHabits) * 100 : 0;\n    \n    // Calculate combined completion rate (both tasks and habits must be considered)\n    let overallCompletionRate = 0;\n    if (totalTasks > 0 && totalHabits > 0) {\n      // Both tasks and habits exist - average their completion rates\n      overallCompletionRate = (taskCompletionRate + habitCompletionRate) / 2;\n    } else if (totalTasks > 0) {\n      // Only tasks exist\n      overallCompletionRate = taskCompletionRate;\n    } else if (totalHabits > 0) {\n      // Only habits exist\n      overallCompletionRate = habitCompletionRate;\n    }\n    \n    // Check for perfect day achievement\n    const isPerfectDay = (\n      totalTasks > 5 && \n      completedTasks === totalTasks && \n      totalHabits > 0 && \n      completedHabits === totalHabits\n    );\n    \n    return {\n      taskCompletionRate,\n      habitCompletionRate,\n      overallCompletionRate,\n      totalTasks,\n      completedTasks,\n      totalHabits,\n      completedHabits,\n      isPerfectDay\n    };\n  };\n  \n  // Get color class based on productivity\n  const getProductivityClass = (date) => {\n    const { overallCompletionRate, totalTasks, totalHabits } = getDayProductivity(date);\n    \n    // Only show productivity colors if there are tasks or habits for the day\n    if (totalTasks === 0 && totalHabits === 0) return '';\n    \n    // Green only when everything is 100% complete\n    if (overallCompletionRate === 100) return 'productive-high';\n    if (overallCompletionRate >= 50) return 'productive-medium';\n    if (overallCompletionRate > 0) return 'productive-low';\n    return '';\n  };\n  \n  // Check if day has achievement star\n  const hasAchievementStar = (date) => {\n    const { isPerfectDay } = getDayProductivity(date);\n    return isPerfectDay;\n  };\n\n  return (\n    <div className=\"calendar\">\n      <div className=\"month\">\n        <button className=\"nav\" onClick={prevMonth}>\n          <i className=\"fas fa-angle-left\"></i>\n        </button>\n        <div>\n          {format(currentDate, 'MMMM', { locale: ru })} \n          <span className=\"year\">{format(currentDate, 'yyyy')}</span>\n        </div>\n        <button className=\"nav\" onClick={nextMonth}>\n          <i className=\"fas fa-angle-right\"></i>\n        </button>\n      </div>\n      \n      <div className=\"days\">\n        {weekDays.map(day => (\n          <span key={day}>{day}</span>\n        ))}\n      </div>\n      \n      <div className=\"dates\">\n        {days.map((day, index) => {\n          const productivityClass = getProductivityClass(day);\n          const hasStar = hasAchievementStar(day);\n          \n          return (\n            <button\n              key={index}\n              className={`\n                ${isToday(day) ? 'today' : ''} \n                ${isSelected(day) ? 'selected' : ''}\n                ${!isCurrentMonth(day) ? 'other-month' : ''}\n                ${productivityClass}\n              `}\n              onClick={() => handleDateClickWithAchievement(day)}\n              disabled={!isCurrentMonth(day)}\n            >\n              <time>{format(day, 'd')}</time>\n              {hasStar && <span className=\"achievement-star\">⭐</span>}\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Calendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}