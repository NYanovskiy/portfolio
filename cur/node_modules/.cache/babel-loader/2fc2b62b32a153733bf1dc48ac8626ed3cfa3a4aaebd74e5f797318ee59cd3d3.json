{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041D\\u0438\\u043A\\u0438\\u0442\\u0430\\\\Desktop\\\\cur\\\\src\\\\components\\\\Calendar.jsx\";\nimport React from 'react';\nimport Calendar from 'react-calendar';\nimport { format, isSameDay } from 'date-fns';\nimport { safeParse } from '../utils/dateUtils';\nimport 'react-calendar/dist/Calendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalendarComponent = ({\n  selectedDate,\n  onDateChange,\n  tasks\n}) => {\n  // Calendar tile content with progress rings\n  const tileContent = ({\n    date,\n    view\n  }) => {\n    if (view !== 'month') return null;\n    const tasksDone = tasks.filter(t => {\n      const d = safeParse(t.datetime);\n      return d ? isSameDay(d, date) && t.completed : false;\n    }).length;\n    const tasksTotal = tasks.filter(t => {\n      const d = safeParse(t.datetime);\n      return d ? isSameDay(d, date) : false;\n    }).length;\n    const percent = tasksTotal ? Math.round(tasksDone / tasksTotal * 100) : 0;\n    const strokeColor = tasksTotal === 0 ? '#d2d6db' : percent >= 85 ? 'var(--green)' : percent >= 50 ? 'var(--yellow)' : 'var(--red)';\n\n    // Larger, bold ring and number\n    const size = 56;\n    const stroke = 3.5;\n    const radius = (size - stroke) / 2;\n    const circ = 2 * Math.PI * radius;\n    const dash = Math.max(0, Math.min(circ, Math.round(percent / 100 * circ)));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: size,\n        height: size,\n        viewBox: `0 0 ${size} ${size}`,\n        \"aria-hidden\": true,\n        children: /*#__PURE__*/_jsxDEV(\"g\", {\n          transform: `translate(${size / 2}, ${size / 2})`,\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            r: radius,\n            stroke: \"#eef2f6\",\n            strokeWidth: stroke,\n            fill: \"none\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n            r: radius,\n            stroke: strokeColor,\n            strokeWidth: stroke,\n            fill: \"none\",\n            strokeDasharray: `${dash} ${circ - dash}`,\n            strokeLinecap: \"round\",\n            transform: \"rotate(-90)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: \"0\",\n            y: \"6\",\n            textAnchor: \"middle\",\n            fontSize: \"16\",\n            fontWeight: 800,\n            fill: \"var(--text)\",\n            children: format(date, 'd')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Calendar tile className for background colors\n  const tileClassName = ({\n    date,\n    view\n  }) => {\n    if (view !== 'month') return '';\n    const tasksDone = tasks.filter(t => {\n      const d = safeParse(t.datetime);\n      return d ? isSameDay(d, date) && t.completed : false;\n    }).length;\n    const tasksTotal = tasks.filter(t => {\n      const d = safeParse(t.datetime);\n      return d ? isSameDay(d, date) : false;\n    }).length;\n    if (!tasksTotal) return 'cal-empty';\n    const percent = Math.round(tasksDone / tasksTotal * 100);\n    return percent >= 85 ? 'cal-green' : percent >= 50 ? 'cal-yellow' : 'cal-red';\n  };\n  return /*#__PURE__*/_jsxDEV(Calendar, {\n    onChange: onDateChange,\n    value: selectedDate,\n    tileContent: tileContent,\n    tileClassName: tileClassName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_c = CalendarComponent;\nexport default CalendarComponent;\nvar _c;\n$RefreshReg$(_c, \"CalendarComponent\");","map":{"version":3,"names":["React","Calendar","format","isSameDay","safeParse","jsxDEV","_jsxDEV","CalendarComponent","selectedDate","onDateChange","tasks","tileContent","date","view","tasksDone","filter","t","d","datetime","completed","length","tasksTotal","percent","Math","round","strokeColor","size","stroke","radius","circ","PI","dash","max","min","style","width","display","alignItems","justifyContent","children","height","viewBox","transform","r","strokeWidth","fill","fileName","_jsxFileName","lineNumber","columnNumber","strokeDasharray","strokeLinecap","x","y","textAnchor","fontSize","fontWeight","tileClassName","onChange","value","_c","$RefreshReg$"],"sources":["C:/Users/Никита/Desktop/cur/src/components/Calendar.jsx"],"sourcesContent":["import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { format, isSameDay } from 'date-fns';\r\nimport { safeParse } from '../utils/dateUtils';\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nconst CalendarComponent = ({ selectedDate, onDateChange, tasks }) => {\r\n  // Calendar tile content with progress rings\r\n  const tileContent = ({ date, view }) => {\r\n    if (view !== 'month') return null;\r\n    \r\n    const tasksDone = tasks.filter(t => {\r\n      const d = safeParse(t.datetime);\r\n      return d ? isSameDay(d, date) && t.completed : false;\r\n    }).length;\r\n    \r\n    const tasksTotal = tasks.filter(t => {\r\n      const d = safeParse(t.datetime);\r\n      return d ? isSameDay(d, date) : false;\r\n    }).length;\r\n    \r\n    const percent = tasksTotal ? Math.round((tasksDone / tasksTotal) * 100) : 0;\r\n    const strokeColor = tasksTotal === 0 ? '#d2d6db' : \r\n                       percent >= 85 ? 'var(--green)' : \r\n                       percent >= 50 ? 'var(--yellow)' : 'var(--red)';\r\n\r\n    // Larger, bold ring and number\r\n    const size = 56;\r\n    const stroke = 3.5;\r\n    const radius = (size - stroke) / 2;\r\n    const circ = 2 * Math.PI * radius;\r\n    const dash = Math.max(0, Math.min(circ, Math.round((percent / 100) * circ)));\r\n\r\n    return (\r\n      <div style={{ width: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n        <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`} aria-hidden>\r\n          <g transform={`translate(${size/2}, ${size/2})`}>\r\n            <circle \r\n              r={radius} \r\n              stroke=\"#eef2f6\" \r\n              strokeWidth={stroke} \r\n              fill=\"none\" \r\n            />\r\n            <circle \r\n              r={radius} \r\n              stroke={strokeColor} \r\n              strokeWidth={stroke} \r\n              fill=\"none\" \r\n              strokeDasharray={`${dash} ${circ - dash}`} \r\n              strokeLinecap=\"round\" \r\n              transform=\"rotate(-90)\" \r\n            />\r\n            <text \r\n              x=\"0\" \r\n              y=\"6\" \r\n              textAnchor=\"middle\" \r\n              fontSize=\"16\" \r\n              fontWeight={800} \r\n              fill=\"var(--text)\"\r\n            >\r\n              {format(date, 'd')}\r\n            </text>\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Calendar tile className for background colors\r\n  const tileClassName = ({ date, view }) => {\r\n    if (view !== 'month') return '';\r\n    \r\n    const tasksDone = tasks.filter(t => {\r\n      const d = safeParse(t.datetime);\r\n      return d ? isSameDay(d, date) && t.completed : false;\r\n    }).length;\r\n    \r\n    const tasksTotal = tasks.filter(t => {\r\n      const d = safeParse(t.datetime);\r\n      return d ? isSameDay(d, date) : false;\r\n    }).length;\r\n    \r\n    if (!tasksTotal) return 'cal-empty';\r\n    \r\n    const percent = Math.round((tasksDone / tasksTotal) * 100);\r\n    return percent >= 85 ? 'cal-green' : percent >= 50 ? 'cal-yellow' : 'cal-red';\r\n  };\r\n\r\n  return (\r\n    <Calendar\r\n      onChange={onDateChange}\r\n      value={selectedDate}\r\n      tileContent={tileContent}\r\n      tileClassName={tileClassName}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CalendarComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}