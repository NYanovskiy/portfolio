{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo } from 'react';\nimport { format } from 'date-fns';\nimport { keyOf, getLast7Days } from '../utils/dateUtils';\nexport const useData = (tasks, habits) => {\n  _s();\n  // Get last 7 days\n  const last7 = useMemo(() => getLast7Days(), []);\n\n  // Calculate completed tasks per day\n  const completedPerDay = useMemo(() => {\n    const map = last7.map(d => ({\n      date: format(d, 'EEE'),\n      key: keyOf(d),\n      completed: 0\n    }));\n    const lookup = Object.fromEntries(map.map(m => [m.key, m]));\n    tasks.forEach(task => {\n      if (task.completed) {\n        const k = keyOf(task.datetime);\n        if (lookup[k]) lookup[k].completed += 1;\n      }\n    });\n    return Object.values(lookup);\n  }, [tasks, last7]);\n\n  // Calculate habit counts per day\n  const habitCounts = useMemo(() => {\n    const map = last7.map(d => ({\n      date: format(d, 'EEE'),\n      key: keyOf(d),\n      count: 0\n    }));\n    const lookup = Object.fromEntries(map.map(m => [m.key, m]));\n    habits.forEach(habit => {\n      Object.keys(habit.records || {}).forEach(k => {\n        if (lookup[k]) lookup[k].count += 1;\n      });\n    });\n    return Object.values(lookup);\n  }, [habits, last7]);\n\n  // Calculate overall statistics\n  const totalDone = tasks.filter(t => t.completed).length;\n  const totalAll = tasks.length;\n  const overallPercent = totalAll ? Math.round(totalDone / totalAll * 100) : 0;\n  return {\n    completedPerDay,\n    habitCounts,\n    totalDone,\n    totalAll,\n    overallPercent\n  };\n};\n_s(useData, \"Z/hD4kad+zwJoSxAJdqgB8exo20=\");","map":{"version":3,"names":["useMemo","format","keyOf","getLast7Days","useData","tasks","habits","_s","last7","completedPerDay","map","d","date","key","completed","lookup","Object","fromEntries","m","forEach","task","k","datetime","values","habitCounts","count","habit","keys","records","totalDone","filter","t","length","totalAll","overallPercent","Math","round"],"sources":["C:/Users/Никита/Desktop/cur/src/hooks/useData.js"],"sourcesContent":["import { useMemo } from 'react';\r\nimport { format } from 'date-fns';\r\nimport { keyOf, getLast7Days } from '../utils/dateUtils';\r\n\r\nexport const useData = (tasks, habits) => {\r\n  // Get last 7 days\r\n  const last7 = useMemo(() => getLast7Days(), []);\r\n\r\n  // Calculate completed tasks per day\r\n  const completedPerDay = useMemo(() => {\r\n    const map = last7.map(d => ({\r\n      date: format(d, 'EEE'),\r\n      key: keyOf(d),\r\n      completed: 0\r\n    }));\r\n    \r\n    const lookup = Object.fromEntries(map.map(m => [m.key, m]));\r\n    \r\n    tasks.forEach(task => {\r\n      if (task.completed) {\r\n        const k = keyOf(task.datetime);\r\n        if (lookup[k]) lookup[k].completed += 1;\r\n      }\r\n    });\r\n    \r\n    return Object.values(lookup);\r\n  }, [tasks, last7]);\r\n\r\n  // Calculate habit counts per day\r\n  const habitCounts = useMemo(() => {\r\n    const map = last7.map(d => ({\r\n      date: format(d, 'EEE'),\r\n      key: keyOf(d),\r\n      count: 0\r\n    }));\r\n    \r\n    const lookup = Object.fromEntries(map.map(m => [m.key, m]));\r\n    \r\n    habits.forEach(habit => {\r\n      Object.keys(habit.records || {}).forEach(k => {\r\n        if (lookup[k]) lookup[k].count += 1;\r\n      });\r\n    });\r\n    \r\n    return Object.values(lookup);\r\n  }, [habits, last7]);\r\n\r\n  // Calculate overall statistics\r\n  const totalDone = tasks.filter(t => t.completed).length;\r\n  const totalAll = tasks.length;\r\n  const overallPercent = totalAll ? Math.round((totalDone / totalAll) * 100) : 0;\r\n\r\n  return {\r\n    completedPerDay,\r\n    habitCounts,\r\n    totalDone,\r\n    totalAll,\r\n    overallPercent\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,KAAK,EAAEC,YAAY,QAAQ,oBAAoB;AAExD,OAAO,MAAMC,OAAO,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAAAC,EAAA;EACxC;EACA,MAAMC,KAAK,GAAGR,OAAO,CAAC,MAAMG,YAAY,CAAC,CAAC,EAAE,EAAE,CAAC;;EAE/C;EACA,MAAMM,eAAe,GAAGT,OAAO,CAAC,MAAM;IACpC,MAAMU,GAAG,GAAGF,KAAK,CAACE,GAAG,CAACC,CAAC,KAAK;MAC1BC,IAAI,EAAEX,MAAM,CAACU,CAAC,EAAE,KAAK,CAAC;MACtBE,GAAG,EAAEX,KAAK,CAACS,CAAC,CAAC;MACbG,SAAS,EAAE;IACb,CAAC,CAAC,CAAC;IAEH,MAAMC,MAAM,GAAGC,MAAM,CAACC,WAAW,CAACP,GAAG,CAACA,GAAG,CAACQ,CAAC,IAAI,CAACA,CAAC,CAACL,GAAG,EAAEK,CAAC,CAAC,CAAC,CAAC;IAE3Db,KAAK,CAACc,OAAO,CAACC,IAAI,IAAI;MACpB,IAAIA,IAAI,CAACN,SAAS,EAAE;QAClB,MAAMO,CAAC,GAAGnB,KAAK,CAACkB,IAAI,CAACE,QAAQ,CAAC;QAC9B,IAAIP,MAAM,CAACM,CAAC,CAAC,EAAEN,MAAM,CAACM,CAAC,CAAC,CAACP,SAAS,IAAI,CAAC;MACzC;IACF,CAAC,CAAC;IAEF,OAAOE,MAAM,CAACO,MAAM,CAACR,MAAM,CAAC;EAC9B,CAAC,EAAE,CAACV,KAAK,EAAEG,KAAK,CAAC,CAAC;;EAElB;EACA,MAAMgB,WAAW,GAAGxB,OAAO,CAAC,MAAM;IAChC,MAAMU,GAAG,GAAGF,KAAK,CAACE,GAAG,CAACC,CAAC,KAAK;MAC1BC,IAAI,EAAEX,MAAM,CAACU,CAAC,EAAE,KAAK,CAAC;MACtBE,GAAG,EAAEX,KAAK,CAACS,CAAC,CAAC;MACbc,KAAK,EAAE;IACT,CAAC,CAAC,CAAC;IAEH,MAAMV,MAAM,GAAGC,MAAM,CAACC,WAAW,CAACP,GAAG,CAACA,GAAG,CAACQ,CAAC,IAAI,CAACA,CAAC,CAACL,GAAG,EAAEK,CAAC,CAAC,CAAC,CAAC;IAE3DZ,MAAM,CAACa,OAAO,CAACO,KAAK,IAAI;MACtBV,MAAM,CAACW,IAAI,CAACD,KAAK,CAACE,OAAO,IAAI,CAAC,CAAC,CAAC,CAACT,OAAO,CAACE,CAAC,IAAI;QAC5C,IAAIN,MAAM,CAACM,CAAC,CAAC,EAAEN,MAAM,CAACM,CAAC,CAAC,CAACI,KAAK,IAAI,CAAC;MACrC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAOT,MAAM,CAACO,MAAM,CAACR,MAAM,CAAC;EAC9B,CAAC,EAAE,CAACT,MAAM,EAAEE,KAAK,CAAC,CAAC;;EAEnB;EACA,MAAMqB,SAAS,GAAGxB,KAAK,CAACyB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACjB,SAAS,CAAC,CAACkB,MAAM;EACvD,MAAMC,QAAQ,GAAG5B,KAAK,CAAC2B,MAAM;EAC7B,MAAME,cAAc,GAAGD,QAAQ,GAAGE,IAAI,CAACC,KAAK,CAAEP,SAAS,GAAGI,QAAQ,GAAI,GAAG,CAAC,GAAG,CAAC;EAE9E,OAAO;IACLxB,eAAe;IACfe,WAAW;IACXK,SAAS;IACTI,QAAQ;IACRC;EACF,CAAC;AACH,CAAC;AAAC3B,EAAA,CAvDWH,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}