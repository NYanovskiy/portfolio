{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041D\\u0438\\u043A\\u0438\\u0442\\u0430\\\\Desktop\\\\cur\\\\src\\\\components\\\\Calendar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { format, addMonths, subMonths, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay, startOfWeek, endOfWeek } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = ({\n  selectedDate,\n  onDateChange,\n  tasks = [],\n  habits = [],\n  onAchievement\n}) => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(selectedDate || new Date());\n\n  // Update currentDate when selectedDate changes\n  useEffect(() => {\n    if (selectedDate) {\n      setCurrentDate(selectedDate);\n    }\n  }, [selectedDate]);\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarStart = startOfWeek(monthStart);\n  const calendarEnd = endOfWeek(monthEnd);\n  const days = eachDayOfInterval({\n    start: calendarStart,\n    end: calendarEnd\n  });\n  const weekDays = ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'];\n  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1));\n  const prevMonth = () => setCurrentDate(subMonths(currentDate, 1));\n  const isCurrentMonth = date => isSameMonth(date, currentDate);\n  const isToday = date => isSameDay(date, new Date());\n  const isSelected = date => selectedDate && isSameDay(date, selectedDate);\n\n  // Handle date click with achievement check\n  const handleDateClickWithAchievement = date => {\n    const {\n      isPerfectDay,\n      taskCompletionRate,\n      totalTasks,\n      completedTasks,\n      totalHabits,\n      completedHabits\n    } = getDayProductivity(date);\n\n    // Trigger achievement animation if perfect day\n    if (isPerfectDay && onAchievement) {\n      onAchievement({\n        type: 'perfect-day',\n        date: format(date, 'dd MMMM yyyy', {\n          locale: ru\n        }),\n        stats: {\n          tasks: `${completedTasks}/${totalTasks}`,\n          habits: `${completedHabits}/${totalHabits}`,\n          completion: `${Math.round(taskCompletionRate)}%`\n        }\n      });\n    }\n    if (onDateChange) {\n      onDateChange(date);\n    }\n  };\n\n  // Calculate productivity for a specific day\n  const getDayProductivity = date => {\n    const dateStr = format(date, 'yyyy-MM-dd');\n\n    // Get tasks for this day\n    const dayTasks = tasks.filter(task => {\n      const taskDate = new Date(task.datetime);\n      return format(taskDate, 'yyyy-MM-dd') === dateStr;\n    });\n\n    // Get habits completed on this day\n    const dayHabits = habits.filter(habit => {\n      const completedDates = habit.completedDates || [];\n      return completedDates.includes(dateStr);\n    });\n    const totalTasks = dayTasks.length;\n    const completedTasks = dayTasks.filter(task => task.completed).length;\n    const totalHabits = habits.length;\n    const completedHabits = dayHabits.length;\n\n    // Calculate task completion rate\n    const taskCompletionRate = totalTasks > 0 ? completedTasks / totalTasks * 100 : 0;\n\n    // Calculate habit completion rate\n    const habitCompletionRate = totalHabits > 0 ? completedHabits / totalHabits * 100 : 0;\n\n    // Calculate combined completion rate (both tasks and habits must be considered)\n    let overallCompletionRate = 0;\n    if (totalTasks > 0 && totalHabits > 0) {\n      // Both tasks and habits exist - average their completion rates\n      overallCompletionRate = (taskCompletionRate + habitCompletionRate) / 2;\n    } else if (totalTasks > 0) {\n      // Only tasks exist\n      overallCompletionRate = taskCompletionRate;\n    } else if (totalHabits > 0) {\n      // Only habits exist\n      overallCompletionRate = habitCompletionRate;\n    }\n\n    // Check for perfect day achievement\n    const isPerfectDay = totalTasks > 5 && completedTasks === totalTasks && totalHabits > 0 && completedHabits === totalHabits;\n    return {\n      taskCompletionRate,\n      habitCompletionRate,\n      overallCompletionRate,\n      totalTasks,\n      completedTasks,\n      totalHabits,\n      completedHabits,\n      isPerfectDay\n    };\n  };\n\n  // Get color class based on productivity\n  const getProductivityClass = date => {\n    const {\n      overallCompletionRate,\n      totalTasks,\n      totalHabits\n    } = getDayProductivity(date);\n\n    // Only show productivity colors if there are tasks or habits for the day\n    if (totalTasks === 0 && totalHabits === 0) return '';\n\n    // Green only when everything is 100% complete\n    if (overallCompletionRate === 100) return 'productive-high';\n    if (overallCompletionRate >= 50) return 'productive-medium';\n    if (overallCompletionRate > 0) return 'productive-low';\n    return '';\n  };\n\n  // Check if day has achievement star\n  const hasAchievementStar = date => {\n    const {\n      isPerfectDay\n    } = getDayProductivity(date);\n    return isPerfectDay;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"month\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"nav\",\n        onClick: prevMonth,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-angle-left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [format(currentDate, 'MMMM', {\n          locale: ru\n        }), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"year\",\n          children: format(currentDate, 'yyyy')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"nav\",\n        onClick: nextMonth,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-angle-right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"days\",\n      children: weekDays.map(day => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: day\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dates\",\n      children: days.map((day, index) => {\n        const productivityClass = getProductivityClass(day);\n        const hasStar = hasAchievementStar(day);\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `\n                ${isToday(day) ? 'today' : ''} \n                ${isSelected(day) ? 'selected' : ''}\n                ${!isCurrentMonth(day) ? 'other-month' : ''}\n                ${productivityClass}\n              `,\n          onClick: () => handleDateClickWithAchievement(day),\n          disabled: !isCurrentMonth(day),\n          children: [/*#__PURE__*/_jsxDEV(\"time\", {\n            children: format(day, 'd')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this), hasStar && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"achievement-star\",\n            children: \"\\u2B50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 27\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"ThfkgokJDGYLhLTrNceCLjGQb3s=\");\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","format","addMonths","subMonths","startOfMonth","endOfMonth","eachDayOfInterval","isSameMonth","isSameDay","startOfWeek","endOfWeek","ru","jsxDEV","_jsxDEV","Calendar","selectedDate","onDateChange","tasks","habits","onAchievement","_s","currentDate","setCurrentDate","Date","monthStart","monthEnd","calendarStart","calendarEnd","days","start","end","weekDays","nextMonth","prevMonth","isCurrentMonth","date","isToday","isSelected","handleDateClickWithAchievement","isPerfectDay","taskCompletionRate","totalTasks","completedTasks","totalHabits","completedHabits","getDayProductivity","type","locale","stats","completion","Math","round","dateStr","dayTasks","filter","task","taskDate","datetime","dayHabits","habit","completedDates","includes","length","completed","habitCompletionRate","overallCompletionRate","getProductivityClass","hasAchievementStar","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","day","index","productivityClass","hasStar","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Никита/Desktop/cur/src/components/Calendar.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { format, addMonths, subMonths, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay, startOfWeek, endOfWeek } from 'date-fns';\nimport { ru } from 'date-fns/locale';\n\nconst Calendar = ({ selectedDate, onDateChange, tasks = [], habits = [], onAchievement }) => {\n  const [currentDate, setCurrentDate] = useState(selectedDate || new Date());\n\n  // Update currentDate when selectedDate changes\n  useEffect(() => {\n    if (selectedDate) {\n      setCurrentDate(selectedDate);\n    }\n  }, [selectedDate]);\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarStart = startOfWeek(monthStart);\n  const calendarEnd = endOfWeek(monthEnd);\n\n  const days = eachDayOfInterval({ start: calendarStart, end: calendarEnd });\n\n  const weekDays = ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'];\n\n  const nextMonth = () => setCurrentDate(addMonths(currentDate, 1));\n  const prevMonth = () => setCurrentDate(subMonths(currentDate, 1));\n\n  const isCurrentMonth = (date) => isSameMonth(date, currentDate);\n  const isToday = (date) => isSameDay(date, new Date());\n  const isSelected = (date) => selectedDate && isSameDay(date, selectedDate);\n  \n  // Handle date click with achievement check\n  const handleDateClickWithAchievement = (date) => {\n    const { isPerfectDay, taskCompletionRate, totalTasks, completedTasks, totalHabits, completedHabits } = getDayProductivity(date);\n    \n    // Trigger achievement animation if perfect day\n    if (isPerfectDay && onAchievement) {\n      onAchievement({\n        type: 'perfect-day',\n        date: format(date, 'dd MMMM yyyy', { locale: ru }),\n        stats: {\n          tasks: `${completedTasks}/${totalTasks}`,\n          habits: `${completedHabits}/${totalHabits}`,\n          completion: `${Math.round(taskCompletionRate)}%`\n        }\n      });\n    }\n    \n    if (onDateChange) {\n      onDateChange(date);\n    }\n  };\n\n  // Calculate productivity for a specific day\n  const getDayProductivity = (date) => {\n    const dateStr = format(date, 'yyyy-MM-dd');\n    \n    // Get tasks for this day\n    const dayTasks = tasks.filter(task => {\n      const taskDate = new Date(task.datetime);\n      return format(taskDate, 'yyyy-MM-dd') === dateStr;\n    });\n    \n    // Get habits completed on this day\n    const dayHabits = habits.filter(habit => {\n      const completedDates = habit.completedDates || [];\n      return completedDates.includes(dateStr);\n    });\n    \n    const totalTasks = dayTasks.length;\n    const completedTasks = dayTasks.filter(task => task.completed).length;\n    const totalHabits = habits.length;\n    const completedHabits = dayHabits.length;\n    \n    // Calculate task completion rate\n    const taskCompletionRate = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;\n    \n    // Calculate habit completion rate\n    const habitCompletionRate = totalHabits > 0 ? (completedHabits / totalHabits) * 100 : 0;\n    \n    // Calculate combined completion rate (both tasks and habits must be considered)\n    let overallCompletionRate = 0;\n    if (totalTasks > 0 && totalHabits > 0) {\n      // Both tasks and habits exist - average their completion rates\n      overallCompletionRate = (taskCompletionRate + habitCompletionRate) / 2;\n    } else if (totalTasks > 0) {\n      // Only tasks exist\n      overallCompletionRate = taskCompletionRate;\n    } else if (totalHabits > 0) {\n      // Only habits exist\n      overallCompletionRate = habitCompletionRate;\n    }\n    \n    // Check for perfect day achievement\n    const isPerfectDay = (\n      totalTasks > 5 && \n      completedTasks === totalTasks && \n      totalHabits > 0 && \n      completedHabits === totalHabits\n    );\n    \n    return {\n      taskCompletionRate,\n      habitCompletionRate,\n      overallCompletionRate,\n      totalTasks,\n      completedTasks,\n      totalHabits,\n      completedHabits,\n      isPerfectDay\n    };\n  };\n  \n  // Get color class based on productivity\n  const getProductivityClass = (date) => {\n    const { overallCompletionRate, totalTasks, totalHabits } = getDayProductivity(date);\n    \n    // Only show productivity colors if there are tasks or habits for the day\n    if (totalTasks === 0 && totalHabits === 0) return '';\n    \n    // Green only when everything is 100% complete\n    if (overallCompletionRate === 100) return 'productive-high';\n    if (overallCompletionRate >= 50) return 'productive-medium';\n    if (overallCompletionRate > 0) return 'productive-low';\n    return '';\n  };\n  \n  // Check if day has achievement star\n  const hasAchievementStar = (date) => {\n    const { isPerfectDay } = getDayProductivity(date);\n    return isPerfectDay;\n  };\n\n  return (\n    <div className=\"calendar\">\n      <div className=\"month\">\n        <button className=\"nav\" onClick={prevMonth}>\n          <i className=\"fas fa-angle-left\"></i>\n        </button>\n        <div>\n          {format(currentDate, 'MMMM', { locale: ru })} \n          <span className=\"year\">{format(currentDate, 'yyyy')}</span>\n        </div>\n        <button className=\"nav\" onClick={nextMonth}>\n          <i className=\"fas fa-angle-right\"></i>\n        </button>\n      </div>\n      \n      <div className=\"days\">\n        {weekDays.map(day => (\n          <span key={day}>{day}</span>\n        ))}\n      </div>\n      \n      <div className=\"dates\">\n        {days.map((day, index) => {\n          const productivityClass = getProductivityClass(day);\n          const hasStar = hasAchievementStar(day);\n          \n          return (\n            <button\n              key={index}\n              className={`\n                ${isToday(day) ? 'today' : ''} \n                ${isSelected(day) ? 'selected' : ''}\n                ${!isCurrentMonth(day) ? 'other-month' : ''}\n                ${productivityClass}\n              `}\n              onClick={() => handleDateClickWithAchievement(day)}\n              disabled={!isCurrentMonth(day)}\n            >\n              <time>{format(day, 'd')}</time>\n              {hasStar && <span className=\"achievement-star\">⭐</span>}\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Calendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}